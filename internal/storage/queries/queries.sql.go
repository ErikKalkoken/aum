// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package queries

import (
	"context"
)

const countApplicationByID = `-- name: CountApplicationByID :one
SELECT
  count(*)
FROM
  applications
WHERE
  app_id = ?
`

func (q *Queries) CountApplicationByID(ctx context.Context, appID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countApplicationByID, appID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createReport = `-- name: CreateReport :exec
INSERT INTO
  reports (app_id, arch, machine_id, os, version)
VALUES
  (?, ?, ?, ?, ?)
`

type CreateReportParams struct {
	AppID     string
	Arch      string
	MachineID string
	Os        string
	Version   string
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) error {
	_, err := q.db.ExecContext(ctx, createReport,
		arg.AppID,
		arg.Arch,
		arg.MachineID,
		arg.Os,
		arg.Version,
	)
	return err
}

const listApplications = `-- name: ListApplications :many
SELECT
  app_id, name
FROM
  applications
`

func (q *Queries) ListApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, listApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(&i.AppID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateApplication = `-- name: UpdateOrCreateApplication :exec
INSERT INTO
  applications (app_id, name)
VALUES
  (?1, ?2) ON CONFLICT(app_id) DO
UPDATE
SET
  name = ?2
WHERE
  app_id = ?1
`

type UpdateOrCreateApplicationParams struct {
	AppID string
	Name  string
}

func (q *Queries) UpdateOrCreateApplication(ctx context.Context, arg UpdateOrCreateApplicationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateApplication, arg.AppID, arg.Name)
	return err
}
